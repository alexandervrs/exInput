<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

_region_x = 0;
_region_y = 0;
_region_width  = display_get_gui_width()/1.5;
_region_height = display_get_gui_height(); 

_xstart = -1;
_ystart = -1;
_direction = 0;
_distance = 0;
_rel_distance = -1;
_is_pressed = false;
_display_scale = 1.0;
_alpha = 1.0;
_visible = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update joystick

if (ex_input_get_mode() != ex_input_mode_touch) {
    exit;
}

var _mouse_x, _mouse_y;

if (window_get_fullscreen()) {
    if (ex_input_os_is_mobile()) {
        _mouse_x = device_mouse_raw_x(0)*_display_scale;
        _mouse_y = device_mouse_raw_y(0)*_display_scale;   
    } else {
        _mouse_x = display_mouse_get_x()*_display_scale;
        _mouse_y = display_mouse_get_y()*_display_scale;
    }
} else {
    _mouse_x = window_mouse_get_x();
    _mouse_y = window_mouse_get_y();
}

// check for touch
if (mouse_check_button_pressed(mb_left) and point_in_rectangle(_mouse_x, _mouse_y, _region_x, _region_y, _region_width, _region_height)) {

    _xstart = _mouse_x;
    _ystart = _mouse_y;
    _is_pressed = true;

}

// check mouse move
if (_is_pressed == true) {

    _direction = radtodeg(arctan2((_mouse_y-(_ystart)),(_mouse_x-(_xstart)+0.000001)));
    _distance = sqrt(sqr(_mouse_x-(_xstart))+sqr(_mouse_y-(_ystart)));
    
}

// check for release

if (mouse_check_button_released(mb_left)) {
    _is_pressed = false;
    _direction = -1;
    _distance = -1;
}

_rel_distance = -1;

if (abs(_distance) &gt; 15) {
    _rel_distance = point_direction(_xstart, _ystart, _mouse_x, _mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw joystick

if (ex_input_get_mode() != ex_input_mode_touch or _visible == false) {
    exit;
}

if (_is_pressed == true) {
    
    draw_set_alpha(_alpha);
    
    // draw the bottom
    draw_sprite(_sprite_bottom, 0, _xstart, _ystart);
    
    // limit joystick knob
    if (_distance &gt; _width) {
        _distance = _width;
    }
    if (_distance &lt; -_width) {
        _distance = _width;
    }
    
    // draw the top
    draw_sprite(_sprite_top, 0, (_xstart)+_distance*(cos(_direction*pi/180)), (_ystart)+_distance*(sin(_direction*pi/180)) );
    
    draw_set_alpha(1.0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do not draw sprite

// do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
