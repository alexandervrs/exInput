<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

// @version: 0.4.1

// properties
_ex_input_data = -1;
_ex_input_data_autoinc = 0;
_ex_input_debug_mode = false;

_ex_input_mode = ex_input_mode_keyboard;
_ex_input_vibration = true;
_ex_input_touch_enabled = true;
_ex_input_system_keys_enabled = false;

_device = 0;
_gamepad_device = 0;

// gamepad data
enum _ex_input_gamepads {
    _device,
    _vibration_motor_left,
    _vibration_motor_right,
    _vibration_motor_left_start,
    _vibration_motor_left_end,
    _vibration_motor_right_start,
    _vibration_motor_right_end,
    _vibration_duration,
    _vibration_position,
    _vibration_easing,
    _vibration_sync,
    _length
}

_ex_gamepad_count = 4;
_ex_input_gamepad_data = ds_grid_create(_ex_input_gamepads._length, _ex_gamepad_count);

// populate grid with gamepad data
for (var _i=0; _i &lt; ds_grid_height(_ex_input_gamepad_data); ++_i) {
    _ex_input_gamepad_data[# _ex_input_gamepads._device, _i]                      = _i;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_duration, _i]          = -1;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left, _i]        = 0.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right, _i]       = 0.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left_start, _i]  = 1.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right_start, _i] = 1.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left_end, _i]    = 0.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right_end, _i]   = 0.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_position, _i]          = 0.0;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_easing, _i]            = -1;
    _ex_input_gamepad_data[# _ex_input_gamepads._vibration_sync, _i]              = false;
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Vibration

if (_ex_input_mode != ex_input_mode_gamepad or _ex_input_vibration == false) {

    //for (var _i=0; _i &lt; _ex_gamepad_count; ++_i) {
    //    gamepad_set_vibration(_i, 0, 0);
    //}
    
    exit;

}

if (_ex_gamepad_count &lt; 1) {
    exit;
}

// loop through gamepads and update the vibration
for (var _i=0; _i &lt; _ex_gamepad_count; ++_i) {

    var _device = _ex_input_gamepad_data[# _ex_input_gamepads._device, _i];
    
    var _value_duration = _ex_input_gamepad_data[# _ex_input_gamepads._vibration_duration, _i];
    
    // vibration
    if (_value_duration &gt; -1) {
        
        var _value_motor_left  =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left, _i];
        var _value_motor_right =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right, _i];

        var _value_motor_left_start  =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left_start, _i];
        var _value_motor_right_start =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right_start, _i];

        var _value_motor_left_end  =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left_end, _i];
        var _value_motor_right_end =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right_end, _i];
                        
        var _value_position =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_position, _i];
        var _value_easing   =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_easing, _i];
        
        var _value_sync   =  _ex_input_gamepad_data[# _ex_input_gamepads._vibration_sync, _i];

        var _speed = 1.0;
        
        if (_value_sync == true) {
            _delta = (delta_time / (1000000 / room_speed));
            _speed *= _delta;
        }
        
        if (_value_position &gt;= _value_duration) { 
            _value_position = _value_duration;
        } else {
            _value_position += _speed;
        }
        
        if (_value_easing == -1) {
            _value_motor_left = lerp(_value_motor_left_start, _value_motor_left_end, ex_input_math_smoothstep(0, 1, _value_position / _value_duration));
        } else {
            _value_motor_left = lerp(_value_motor_left_start, _value_motor_left_end, script_execute(_value_easing, _value_position, 0, clamp(_value_position * _value_duration, 0, 1), _value_duration));
        } 
        
        if (_value_easing == -1) {
            _value_motor_right = lerp(_value_motor_right_start, _value_motor_right_end, ex_input_math_smoothstep(0, 1, _value_position / _value_duration));
        } else {
            _value_motor_right = lerp(_value_motor_right_start, _value_motor_right_end, script_execute(_value_easing, _value_position, 0, clamp(_value_position * _value_duration, 0, 1), _value_duration));
        } 
        
        gamepad_set_vibration(_device, _value_motor_left, _value_motor_right);
        
        _ex_input_gamepad_data[# _ex_input_gamepads._vibration_position, _i] = _value_position;
        _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left, _i] = _value_motor_left;
        _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right, _i] =  _value_motor_right;
        
        if (_value_position &gt;= _value_duration) {
        
            _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_left, _i]  = 0.0;
            _ex_input_gamepad_data[# _ex_input_gamepads._vibration_motor_right, _i] = 0.0;
            _ex_input_gamepad_data[# _ex_input_gamepads._vibration_position, _i] = -1;
            _ex_input_gamepad_data[# _ex_input_gamepads._vibration_duration, _i] = -1;
            
            gamepad_set_vibration(_device, 0.0, 0.0);
            
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Vibration

for (var _i=0; _i &lt; _ex_gamepad_count; ++_i) {

    gamepad_set_vibration(_i, 0, 0);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
